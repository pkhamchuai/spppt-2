DHR
SP_DHR_Net(
  (affineNet): Affine_Network(
    (feature_extractor): Feature_Extractor(
      (input_layer): Sequential(
        (0): Conv2d(2, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
      )
      (layer_1): Forward_Layer(
        (pool_layer): Sequential(
          (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(3, 3))
        )
        (layer): Sequential(
          (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(3, 3))
          (1): GroupNorm(128, 128, eps=1e-05, affine=True)
          (2): PReLU(num_parameters=1)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(128, 128, eps=1e-05, affine=True)
          (5): PReLU(num_parameters=1)
        )
      )
      (layer_2): Forward_Layer(
        (layer): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(128, 128, eps=1e-05, affine=True)
          (2): PReLU(num_parameters=1)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(128, 128, eps=1e-05, affine=True)
          (5): PReLU(num_parameters=1)
        )
      )
      (layer_3): Forward_Layer(
        (pool_layer): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(3, 3))
        )
        (layer): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(3, 3))
          (1): GroupNorm(256, 256, eps=1e-05, affine=True)
          (2): PReLU(num_parameters=1)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(256, 256, eps=1e-05, affine=True)
          (5): PReLU(num_parameters=1)
        )
      )
      (layer_4): Forward_Layer(
        (layer): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): GroupNorm(256, 256, eps=1e-05, affine=True)
          (2): PReLU(num_parameters=1)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(256, 256, eps=1e-05, affine=True)
          (5): PReLU(num_parameters=1)
        )
      )
      (layer_5): Forward_Layer(
        (pool_layer): Sequential(
          (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(3, 3))
        )
        (layer): Sequential(
          (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(3, 3))
          (1): GroupNorm(512, 512, eps=1e-05, affine=True)
          (2): PReLU(num_parameters=1)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(512, 512, eps=1e-05, affine=True)
          (5): PReLU(num_parameters=1)
        )
      )
      (layer_6): Forward_Layer(
        (pool_layer): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(3, 3))
        )
        (layer): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(3, 3))
          (1): GroupNorm(1024, 1024, eps=1e-05, affine=True)
          (2): PReLU(num_parameters=1)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): GroupNorm(1024, 1024, eps=1e-05, affine=True)
          (5): PReLU(num_parameters=1)
        )
      )
      (last_layer): Sequential(
        (0): Conv2d(1024, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (1): GroupNorm(512, 512, eps=1e-05, affine=True)
        (2): PReLU(num_parameters=1)
        (3): Conv2d(512, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (4): GroupNorm(256, 256, eps=1e-05, affine=True)
        (5): PReLU(num_parameters=1)
        (6): AdaptiveAvgPool2d(output_size=(1, 1))
      )
    )
    (regression_network): Regression_Network(
      (fc): Sequential(
        (0): Linear(in_features=256, out_features=6, bias=True)
      )
    )
  )
)
31010_0.0001_0_10_1

Model name:  dataset3_sup1_image0_points1_loss_image0
Model code:  31010_0.0001_0_10_1
Dataset used:  Synthetic eye hard
Supervised or unsupervised model:  Supervised
Loss image type:  Loss image not used
Points used:  Points used
Loss function case:  0
Loss function for image:  MSELoss()
Loss function for affine:  <utils.utils1.loss_affine object at 0x7f3545585a80>
Learning rate:  0.0001
Decay rate:  0.96
Start epoch:  0
Number of epochs:  10
Batch size:  1


